package com.example.shoppinglist.data.db

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import com.example.shoppinglist.data.db.entity.ShoppingItem // Import your entity
import com.example.shoppinglist.data.db.ShoppingDao // Import your DAO interface

// Annotates the class to be a Room Database with entities and version
@Database(
    entities = [ShoppingItem::class], // Reference the correct entity class
    version = 1, // Database version number
)
abstract class ShoppingDatabase : RoomDatabase() {

    // Abstract method to get the DAO for ShoppingItem
    abstract fun getShoppingDao(): ShoppingDao // Correct naming for DAO

    companion object {
        @Volatile // Ensures visibility of changes to this variable across threads
        private var instance: ShoppingDatabase? = null // Singleton instance of the database
        private val LOCK = Any() // Lock object for synchronization

        // Method to create a new database instance
        private fun createDatabase(context: Context): ShoppingDatabase {
            return Room.databaseBuilder(
                context.applicationContext, // Use application context to avoid memory leaks
                ShoppingDatabase::class.java, // Class of the database
                "shopping.db" // Name of the database file
            ).build() // Build the database instance
        }

        // Public method to get the singleton instance of the database
        fun getInstance(context: Context): ShoppingDatabase {
            // If instance is null, synchronize and create the database instance
            return instance ?: synchronized(LOCK) {
                instance ?: createDatabase(context).also { instance = it }
            }
        }
    }
}
/*
* Package Declaration:

The ShoppingDatabase class is part of the com.example.shoppinglist.data.db package, indicating its role in the data layer of the application.
Imports:

Imports necessary classes, including Context, Database, Room, and RoomDatabase from the Room library, as well as the ShoppingItem entity and ShoppingDao interface.
@Database Annotation:

The @Database annotation indicates that this class is a Room database.
It specifies the entities (in this case, ShoppingItem) and the database version (set to 1).
Abstract Class:

ShoppingDatabase extends RoomDatabase, making it a Room database class.
This class is abstract, meaning it cannot be instantiated directly. Instead, Room generates a concrete implementation when the application is built.
Abstract Method:

abstract fun getShoppingDao(): ShoppingDao: This method provides access to the DAO interface for ShoppingItem. The implementation will be generated by Room.
Companion Object:

The companion object allows the ShoppingDatabase to have static members and methods.
@Volatile: This annotation ensures that changes to the instance variable are visible to all threads immediately, preventing caching issues.
private var instance: ShoppingDatabase? = null: A nullable variable that holds the singleton instance of the database.
private val LOCK = Any(): A lock object used for synchronizing access to the database instance.
createDatabase Method:

private fun createDatabase(context: Context): ShoppingDatabase: This method creates a new instance of the database using the Room.databaseBuilder method.
It uses the application context to avoid memory leaks and specifies the database name as "shopping.db".
getInstance Method:

fun getInstance(context: Context): ShoppingDatabase: This method provides a way to access the singleton instance of the ShoppingDatabase.
It first checks if instance is null. If it is, it synchronizes on the LOCK object to ensure that only one thread can create the database instance at a time. If instance is still null after synchronization, it calls createDatabase(context) to create the instance and assigns it to instance.*/